#! /usr/bin/tclsh
#
# Usage:
# gen-topo.sh <topology_desc_file.conf>
#


proc main {} {

    global argv prefix domain nodes links clients dir

    # get file name
    set desc_file [lindex $argv 0]

    # open file
    set desc_fd [open $desc_file r]

    # parse file
    set lineNumber 0
    set prefix ""
    set domain ""
    set nodes {}
    set links {}
    set clients {}
    while {[gets $desc_fd line] >= 0} {

	    # discard comments
	    if {[string match {#*} $line]} continue

	    # discard blank lines
	    if {[string trim $line] eq ""} continue

	    # read section delimitter
	    if {[string equal -length 2 $line "--"]} {
		    set section [lindex [split $line] 1]
		    continue
	    }

	    #read sections
	    switch -nocase $section {
		    "prefix" {
			    set prefix $line
		    }
		    "domain" {
			    set domain $line
		    }
		    "nodes" {
			    lappend nodes [split $line]
		    }
		    "links" {
			    lappend links [split $line]
		    }
		    "clients" {
			    lappend clients [split $line]
		    }
	    }
    }
    close $desc_fd

    set dir "$domain-[clock format [clock seconds] -format "%Y-%m-%d"]"
    exec mkdir $dir

    gen_pss_files
    gen_oscars_topo
    gen_net_diagram
}

# generate OSCARS PSS aux files
proc gen_pss_files {} {

    global prefix domain nodes links clients dir

    set out_dev_addr [open "$dir/config-device-addresses.yaml" w]
    set out_eo_dev [open "$dir/config-eompls-device-addresses.yaml" w]
    set out_dev_conn [open "$dir/config-device-connectors.yaml" w]
    set out_dev_model [open "$dir/config-device-models.yaml" w]
    set out_eo_ifce [open "$dir/config-eompls-ifce-addresses.yaml" w]

    # headers
    puts $out_dev_addr "---"
    puts $out_eo_dev "---"
    puts $out_dev_conn "---"
    puts $out_dev_model "---"
    puts $out_eo_ifce "---"

    # devices
    foreach elem $nodes {
	    set node [lindex $elem 0]
	    set address [join [list $prefix [lindex $elem 1]] ""]

	    # address
	    puts $out_dev_addr "\"$node\":\t\"$address\""
	    puts $out_eo_dev   "\"$node\":\t\"$address\""

	    # other
	    puts $out_dev_conn  "\"$node\":\t\"junoscript\""
	    puts $out_dev_model "\"$node\":\t\"juniper-mx\""

	    # adding ports/links
	    foreach line $links {
		    set index [lsearch -ascii $line $node]
		    if {$index != -1} {
			    set nodea [lindex $line 0]
			    set nodeb [lindex $line 1]
			    set addra [lindex $line 2]
			    set addrb [lindex $line 3]
			    set ifacea [lindex $line 4]
			    set ifaceb [lindex $line 5]

			    if {$node == $nodea} {
				    puts $out_eo_ifce   "\"urn:ogf:network:domain=${domain}:node=${nodea}:port=${ifacea}:link=10.0.0${addra}\":\t\"$prefix.$addra\""
			    } else {
				    puts $out_eo_ifce   "\"urn:ogf:network:domain=${domain}:node=${nodeb}:port=${ifaceb}:link=10.0.0${addrb}\":\t\"$prefix.$addrb\""
			    }
		    }
	    }
    }

    close $out_dev_addr
    close $out_eo_dev
    close $out_dev_conn
    close $out_dev_model
    close $out_eo_ifce
}

# generate OSCARS topology file
proc gen_oscars_topo {} {

    global prefix domain nodes links clients dir

    set out_fd [open "$dir/topology-$domain.xml" w]

    # header
    puts $out_fd "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
    puts $out_fd "<CtrlPlane:topology xmlns:CtrlPlane=\"http://ogf.org/schema/network/topology/ctrlPlane/20080828/\" id=\"cipo.rnp.br\">"
    puts $out_fd ""

    # description
    puts $out_fd "  <xsd:documentation xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" lang=\"en\"> Automatically generated by gen-topo script. </xsd:documentation>"
    puts $out_fd ""

    # domain info
    puts $out_fd "  <CtrlPlane:idcId>${domain}</CtrlPlane:idcId>"
    puts $out_fd "  <CtrlPlane:domain id=\"urn:ogf:network:domain=${domain}\">"
    puts $out_fd ""

    # adding nodes
    foreach elem $nodes {
	    set node [lindex $elem 0]
	    set address [join [list $prefix [lindex $elem 1]] ""]
	    puts $out_fd "    <!-- ROUTER $node -->"
	    puts $out_fd "    <CtrlPlane:node id=\"urn:ogf:network:domain=${domain}:node=${node}\">"
	    puts $out_fd "      <CtrlPlane:address>${address}</CtrlPlane:address>"
	    puts $out_fd ""

	    set index [lsearch -index 0 -ascii $clients $node]
	    if {$index != -1} {
		    set iface [lindex $clients $index 1]
		    set capacity [lindex $clients $index 2]
		    set mincap [expr $capacity/100]
		    set vlans [lindex $clients $index 3]

		    puts $out_fd "      <!-- client port $node -->"
		    puts $out_fd "      <CtrlPlane:port id=\"urn:ogf:network:domain=${domain}:node=${node}:port=${iface}\">"
		    puts $out_fd "        <CtrlPlane:capacity>${capacity}</CtrlPlane:capacity>"
		    puts $out_fd "        <CtrlPlane:maximumReservableCapacity>${capacity}</CtrlPlane:maximumReservableCapacity>"
		    puts $out_fd "        <CtrlPlane:minimumReservableCapacity>${mincap}</CtrlPlane:minimumReservableCapacity>"
		    puts $out_fd "        <CtrlPlane:granularity>${mincap}</CtrlPlane:granularity>"
		    puts $out_fd ""
		    puts $out_fd "        <CtrlPlane:link id=\"urn:ogf:network:domain=${domain}:node=${node}:port=${iface}:link=*\">"
		    puts $out_fd "          <CtrlPlane:remoteLinkId>urn:ogf:network:domain=*:node=*:port=*:link=*</CtrlPlane:remoteLinkId>"
		    puts $out_fd "          <CtrlPlane:trafficEngineeringMetric>100</CtrlPlane:trafficEngineeringMetric>"
		    puts $out_fd "          <CtrlPlane:capacity>${capacity}</CtrlPlane:capacity>"
		    puts $out_fd "          <CtrlPlane:maximumReservableCapacity>${capacity}</CtrlPlane:maximumReservableCapacity>"
		    puts $out_fd "          <CtrlPlane:minimumReservableCapacity>${mincap}</CtrlPlane:minimumReservableCapacity>"
		    puts $out_fd "          <CtrlPlane:granularity>${mincap}</CtrlPlane:granularity>"
		    puts $out_fd "          <CtrlPlane:SwitchingCapabilityDescriptors>"
		    puts $out_fd "            <CtrlPlane:switchingcapType>l2sc</CtrlPlane:switchingcapType>"
		    puts $out_fd "            <CtrlPlane:encodingType>ethernet</CtrlPlane:encodingType>"
		    puts $out_fd "            <CtrlPlane:switchingCapabilitySpecificInfo>"
		    puts $out_fd "              <CtrlPlane:interfaceMTU>5000</CtrlPlane:interfaceMTU>"
		    puts $out_fd "              <CtrlPlane:vlanRangeAvailability>${vlans}</CtrlPlane:vlanRangeAvailability>"
		    puts $out_fd "              <CtrlPlane:vlanTranslation>1</CtrlPlane:vlanTranslation>"
		    puts $out_fd "            </CtrlPlane:switchingCapabilitySpecificInfo>"
		    puts $out_fd "          </CtrlPlane:SwitchingCapabilityDescriptors>"
		    puts $out_fd "        </CtrlPlane:link>"
		    puts $out_fd "      </CtrlPlane:port>"
		    puts $out_fd ""
	    }

	    # adding ports/links
	    foreach line $links {
		    set index [lsearch -ascii $line $node]
		    if {$index != -1} {
			    set nodea [lindex $line 0]
			    set nodeb [lindex $line 1]
			    set addra [lindex $line 2]
			    set addrb [lindex $line 3]
			    set ifacea [lindex $line 4]
			    set ifaceb [lindex $line 5]
			    set capacity [lindex $line 6]
			    set mincap [expr $capacity/100]
			    set vlans [lindex $line 7]

			    if {$node == $nodea} {
				    puts $out_fd "      <!-- link to $nodeb -->"
				    puts $out_fd "      <CtrlPlane:port id=\"urn:ogf:network:domain=${domain}:node=${nodea}:port=${ifacea}\">"
				    puts $out_fd "        <CtrlPlane:capacity>${capacity}</CtrlPlane:capacity>"
				    puts $out_fd "        <CtrlPlane:maximumReservableCapacity>${capacity}</CtrlPlane:maximumReservableCapacity>"
				    puts $out_fd "        <CtrlPlane:minimumReservableCapacity>${mincap}</CtrlPlane:minimumReservableCapacity>"
				    puts $out_fd "        <CtrlPlane:granularity>${mincap}</CtrlPlane:granularity>"
				    puts $out_fd ""
				    puts $out_fd "        <CtrlPlane:link id=\"urn:ogf:network:domain=${domain}:node=${nodea}:port=${ifacea}:link=10.0.0${addra}\">"
				    puts $out_fd "          <CtrlPlane:remoteLinkId>urn:ogf:network:domain=${domain}:node=${nodeb}:port=${ifaceb}:link=10.0.0${addrb}</CtrlPlane:remoteLinkId>"
				    puts $out_fd "          <CtrlPlane:trafficEngineeringMetric>100</CtrlPlane:trafficEngineeringMetric>"
				    puts $out_fd "          <CtrlPlane:capacity>${capacity}</CtrlPlane:capacity>"
				    puts $out_fd "          <CtrlPlane:maximumReservableCapacity>${capacity}</CtrlPlane:maximumReservableCapacity>"
				    puts $out_fd "          <CtrlPlane:minimumReservableCapacity>${mincap}</CtrlPlane:minimumReservableCapacity>"
				    puts $out_fd "          <CtrlPlane:granularity>${mincap}</CtrlPlane:granularity>"
				    puts $out_fd "          <CtrlPlane:SwitchingCapabilityDescriptors>"
				    puts $out_fd "            <CtrlPlane:switchingcapType>l2sc</CtrlPlane:switchingcapType>"
				    puts $out_fd "            <CtrlPlane:encodingType>ethernet</CtrlPlane:encodingType>"
				    puts $out_fd "            <CtrlPlane:switchingCapabilitySpecificInfo>"
				    puts $out_fd "              <CtrlPlane:interfaceMTU>5000</CtrlPlane:interfaceMTU>"
				    puts $out_fd "              <CtrlPlane:vlanRangeAvailability>${vlans}</CtrlPlane:vlanRangeAvailability>"
				    puts $out_fd "              <CtrlPlane:vlanTranslation>1</CtrlPlane:vlanTranslation>"
				    puts $out_fd "            </CtrlPlane:switchingCapabilitySpecificInfo>"
				    puts $out_fd "          </CtrlPlane:SwitchingCapabilityDescriptors>"
				    puts $out_fd "        </CtrlPlane:link>"
				    puts $out_fd "      </CtrlPlane:port>"
				    puts $out_fd ""
			    } else {
				    puts $out_fd "      <!-- link to $nodea -->"
				    puts $out_fd "      <CtrlPlane:port id=\"urn:ogf:network:domain=${domain}:node=${nodeb}:port=${ifaceb}\">"
				    puts $out_fd "        <CtrlPlane:capacity>${capacity}</CtrlPlane:capacity>"
				    puts $out_fd "        <CtrlPlane:maximumReservableCapacity>${capacity}</CtrlPlane:maximumReservableCapacity>"
				    puts $out_fd "        <CtrlPlane:minimumReservableCapacity>${mincap}</CtrlPlane:minimumReservableCapacity>"
				    puts $out_fd "        <CtrlPlane:granularity>${mincap}</CtrlPlane:granularity>"
				    puts $out_fd ""
				    puts $out_fd "        <CtrlPlane:link id=\"urn:ogf:network:domain=${domain}:node=${nodeb}:port=${ifaceb}:link=10.0.0${addrb}\">"
				    puts $out_fd "          <CtrlPlane:remoteLinkId>urn:ogf:network:domain=${domain}:node=${nodea}:port=${ifacea}:link=10.0.0${addra}</CtrlPlane:remoteLinkId>"
				    puts $out_fd "          <CtrlPlane:trafficEngineeringMetric>100</CtrlPlane:trafficEngineeringMetric>"
				    puts $out_fd "          <CtrlPlane:capacity>${capacity}</CtrlPlane:capacity>"
				    puts $out_fd "          <CtrlPlane:maximumReservableCapacity>${capacity}</CtrlPlane:maximumReservableCapacity>"
				    puts $out_fd "          <CtrlPlane:minimumReservableCapacity>${mincap}</CtrlPlane:minimumReservableCapacity>"
				    puts $out_fd "          <CtrlPlane:granularity>${mincap}</CtrlPlane:granularity>"
				    puts $out_fd "          <CtrlPlane:SwitchingCapabilityDescriptors>"
				    puts $out_fd "            <CtrlPlane:switchingcapType>l2sc</CtrlPlane:switchingcapType>"
				    puts $out_fd "            <CtrlPlane:encodingType>ethernet</CtrlPlane:encodingType>"
				    puts $out_fd "            <CtrlPlane:switchingCapabilitySpecificInfo>"
				    puts $out_fd "              <CtrlPlane:interfaceMTU>5000</CtrlPlane:interfaceMTU>"
				    puts $out_fd "              <CtrlPlane:vlanRangeAvailability>${vlans}</CtrlPlane:vlanRangeAvailability>"
				    puts $out_fd "              <CtrlPlane:vlanTranslation>1</CtrlPlane:vlanTranslation>"
				    puts $out_fd "            </CtrlPlane:switchingCapabilitySpecificInfo>"
				    puts $out_fd "          </CtrlPlane:SwitchingCapabilityDescriptors>"
				    puts $out_fd "        </CtrlPlane:link>"
				    puts $out_fd "      </CtrlPlane:port>"
				    puts $out_fd ""
			    }
		    }
	    }

	    puts $out_fd "    </CtrlPlane:node>"
	    puts $out_fd ""
    }

    puts $out_fd "  </CtrlPlane:domain>"
    puts $out_fd ""
    puts $out_fd "</CtrlPlane:topology>"
    puts $out_fd ""

    close $out_fd
}

proc gen_net_diagram {} {

    global prefix domain nodes links clients dir

    set out_fd [open "$dir/diagram.dot" w]

    # Header section
    puts $out_fd "graph cipo_network \{"
    puts $out_fd "splines=true;"
    puts $out_fd "overlap=scale;"
    
    # Plot nodes
    foreach elem $nodes {
	puts $out_fd "[lindex $elem 0] \[ shape=oval, pos=\"[lindex $elem 2],[lindex $elem 3]\!\", label=\"[lindex $elem 0] ([lindex $elem 1])\" \];"
    }

    # Plot links
    foreach elem $links {
	#puts $out_fd "[lindex $elem 0] -- [lindex $elem 1] \[ label=\"[lindex $elem 7]\" \];"
	puts $out_fd "[lindex $elem 0] -- [lindex $elem 1] \[ taillabel=\"[lindex $elem 2]\", headlabel=\"[lindex $elem 3]\" \];"
    }

    puts $out_fd "\}"

    close $out_fd

    exec neato -Tps $dir/diagram.dot -o $dir/diagram.ps
}

main
